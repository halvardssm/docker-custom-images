name: Schedule CI

on:
  schedule:
    - cron: "0 5 * * *"
  push:
    branches:
      - main
    paths:
      - asdf/**
      - deno-node/**

jobs:
  asdf:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: asdf
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get latest Brew version
        id: brew-version
        run: echo "VERSION=$(curl -sL https://api.github.com/repos/Homebrew/brew/releases/latest | jq -r '.tag_name')" >> "$GITHUB_OUTPUT"
      - name: Get latest Asdf version
        id: asdf-version
        run: echo "VERSION=$(curl -sL https://api.github.com/repos/asdf-vm/asdf/releases/latest | jq -r '.tag_name' | grep -oE '[^v].*$')" >> "$GITHUB_OUTPUT"
      - name: Get image version
        id: image-version
        run: echo "VERSION=${{ steps.brew-version.outputs.VERSION }}-${{ steps.asdf-version.outputs.VERSION }}" >> "$GITHUB_OUTPUT"
      - name: Check if version exists on hub
        id: docker-version
        run: echo "VERSION=$(curl -s 'https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}/tags/${{ steps.image-version.outputs.VERSION }}/' | jq -r '.name')" >> "$GITHUB_OUTPUT"
      - run: echo "Image version ${{ steps.image-version.outputs.VERSION }}, Brew version ${{ steps.brew-version.outputs.VERSION }}, Asdf version ${{ steps.asdf-version.outputs.VERSION }}, Docker version ${{ steps.docker-version.outputs.VERSION }}"
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        if: steps.docker-version.outputs.VERSION != steps.image-version.outputs.VERSION
        with:
          context: ./${{ env.IMAGE_NAME }}
          pull: true
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.VERSION }}

  deno-node:
    needs: asdf
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: deno-node
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - uses: denoland/setup-deno@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get latest Node version
        id: node-version
        run: echo "VERSION=$(node --version | grep -oE '[^v].*$')" >> "$GITHUB_OUTPUT"
      - name: Get latest Deno version
        id: deno-version
        run: echo "VERSION=$(deno -V | grep -oE '[^ ]+$')" >> "$GITHUB_OUTPUT"
      - name: Get image version
        id: image-version
        run: echo "VERSION=${{ steps.node-version.outputs.VERSION }}-${{ steps.deno-version.outputs.VERSION }}" >> "$GITHUB_OUTPUT"
      - name: Check if version exists on hub
        id: docker-version
        run: echo "VERSION=$(curl -s 'https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}/tags/${{ steps.image-version.outputs.VERSION }}/' | jq '.name')" >> "$GITHUB_OUTPUT"
      - run: echo "Image version ${{ steps.image-version.outputs.VERSION }}, Node version ${{ steps.node-version.outputs.VERSION }}, Deno version ${{ steps.deno-version.outputs.VERSION }}, Docker version ${{ steps.docker-version.outputs.VERSION }}"
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        if: ${{ steps.docker-version.outputs.VERSION != steps.image-version.outputs.VERSION }}
        with:
          context: ./${{ env.IMAGE_NAME }}
          pull: true
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.VERSION }}
          build-args: |
            NODE_VERSION=${{ steps.node-version.outputs.VERSION }}
            DENO_VERSION=${{ steps.deno-version.outputs.VERSION }}
